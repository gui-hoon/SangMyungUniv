% median filter 함수입니다. 이때 마스크는 mask_size x mask_size 입니다.% 함수 사용전에 imread()와 imnoise() 함수를 사용하여 salt & pepper가 섞인 이미지를 저장합니다. % med(in, mask_size) -> in에는 미리 준비한 noise가 있는 이미지를 넣습니다.% -> mask_size에는 원하는 마스크 크기 를 입력합니다.function [out] = med(in, mask_size)  [x, y] = size(in); % 입력받은 이미지의 행의 크기와 열의 크기가 x y에 저장됩니다.  mid = round((mask_size.^2)/2); % 마스크의 중간 값을 뽑을 때 사용할 index값값  rad = floor(mask_size/2);   % 이미지 영역 밖의 처리를 위해 zero-padding을 사용합니다.   zero_padding = zeros(x+2*rad,y+2*rad);  for i = 1 : x    for j = 1 : y        zero_padding(j+rad,i+rad) = in(j,i);    end  end  % medianfiltering 후 값이 저장될 변수 out을 0으로 초기화 해줍니다.  out = zeros(x,y);  % 자기 자신을 포함한 주위의 화소값들 중에서 중간값을 뽑습니다.  for i = 1 + rad : y + rad      for j = 1 + rad : x + rad          med = zero_padding(j-rad:j+rad, i-rad:i+rad); % 3x3의 matrix를 뽑아 med에 저장합니다.          med = reshape(med,1,(mask_size.^2)); % 뽑은 matrix를 한 행으로 나열합니다.          med = sort(med); % 오름차순으로 정렬합니다.          out(j-1,i-1) = med(mid); % 중간값을 뽑아 저장합니다.       end  end  out = uint8(out); % 필터링된 matrix를 형변환 합니다.  imshow(out); % 필터링된 이미지를 보여줍니다.  end# mask_size가 클수록 필터링된 이미지가 뭉개지는 것을 확인할 수 있습니다.